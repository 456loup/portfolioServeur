

// On commence par initialiser les variable essentielles 

const canvas = document.querySelector('.canva');
const contexte = canvas.getContext('2d'); 
const resolution = 30; 
canvas.width = 800;
canvas.height = 800; 
const COLS = Math.floor(canvas.width / resolution); 
const ROWS =  Math.floor(canvas.height / resolution) ; 
const tempsAttente = 100; 
const menuChoix = document.getElementById("menu"); 

let grid = buildGridAleatoire(ROWS, COLS); 

grid = viderGrille(); 


let i = 0 ;

let y = 0; 

for(i = 0 ; i < grid.length ; i++){
    for(y = 0 ; y < grid[i].length ; y++){
        console.log(" ooooh " + grid[i][y]); 
    }
}


/* vider Grille  */

function viderGrille(){
    return new Array(ROWS).fill(null).map( () => new Array(COLS)).fill(0); 
}

function grilleEstVide(){

    let verite = false; 
    let i = 0; 
    let y = 0; 
    

    for( i = 0 ; i < grid.length ; i++){
        for( y = 0 ; y < grid[i].length ; y++){
            if(grid[i][y] != 0){
                return false; 
            }
        }
    }
    return true; 
}



/* l utilisateur modifie le tableau dynamiquement  */

function initialiserMatriceManuellement(){

    menuChoix.innerHTML = "<h1> Les coordonnees du nouveau point </h1> <br> <h2> x : </h2>  <input type=\"number\"> "
                        + "   <h2> y : </h2> <input type=\"number\">   "
                        + " <br> <br>  <button type=\"button\" id=\"boutonGo\"> GO  </button> "
                        + " <br> <button type=\"button\" id=\"boutonStop\"> STOP </button>    " ; 
    let boutonDemarrer = document.getElementById("boutonGo").addEventListener('click' , function(){ grid = buildGridAleatoire(ROWS , COLS) ; requestAnimationFrame(update);});
    let boutonArreter = document.getElementById("boutonStop").addEventListener('click' , function(){}  ); 

}


function sleep(ms) {
    let currentTime = Date.now()
    while(currentTime + ms > Date.now()) {}
}


/* fonction d attente  */
function sleep(milliseconds) {
    const date = Date.now();
    let currentDate = null;
    do {
      currentDate = Date.now();
    } while (currentDate - date < milliseconds);
  }

// fonction qui construit la grille (retourne une grille d'entier 0 ou 1 )

function buildGridAleatoire(ROWS , COLS ){
    return new Array(ROWS).fill(null).map(
        () => new Array(COLS).fill(0).map(
            () => Math.floor(Math.random() * 2 ) ) 
    )
}

// Fonction qui actualise le rendu de la matrice d'entier 
function render(grid , contexte){

    contexte.clearRect(0 , 0 , contexte.width , contexte.height); 
    // on dessine chacune des cases de la grille si la cellule 
    // est vivante elle sera en noir , sinon en blanc 
    for(let col = 0 ; col < grid.length; col++){
        for(let row = 0 ; row < grid[col].length ; row++){

          
            const cell = grid[col][row]; 
            contexte.beginPath(); 
            contexte.rect(col * resolution ,  row * resolution , resolution , resolution); 
            contexte.fillStyle = cell == 1 ? 'black' : 'white';  
            contexte.fill(); 
            contexte.stroke(); 
        }
    }
}

// Fonction qui update la matrice 1 FOIS 
function nouvelleGeneration(grid){

    let newGrid = grid.map(arr => [...arr]); 

    console.log(newGrid); 
    let compteur = 0 ; 
    let cellule = 0;
    let row = 0; 
    let col = 0; 
    let i = 0; 
    let y = 0 

    /* On itere sur chaque case de la grid  */
    for( row = 0 ; row < newGrid.length ; row++){
        for( col = 0 ; col < newGrid[row].length ; col++){

            /* Ici on defini la cellule en question  */
            cellule = grid[row][col]; 

            /* Cette  iteration a pour but de compter le nombre de voisins   */
            for( i = -1 ; i < 2  ; i++){
                for( y = -1 ; y < 2  ; y++){

                    /* Cette condition gère les cas ou la case est en bordure , voir dans un angles 
                    droit de la grille  */
                    if( !(row + i < 0 || row+i >= grid.length || col+y < 0 || col+y >= grid[row].length) 
                    && !(i == 0 && y == 0) ){
                        
                        compteur += grid[row+i][col+y]; 
                    }
                }
            }

            /* On applique ensuite les règles du jeu de la vie , étant donné que l'on 
            connait le nombre de voisin , on peut faire toutes les décisions nécessaires  */

            if(cellule == 1 ){
                if(compteur < 2 || compteur > 3){
                    newGrid[row][col] = 0; 
                }
            }else{
                if(compteur == 3 ){
                    newGrid[row][col] = 1; 
                }
            }

            // On oublie pas de mettre le compteur a vide pour la prochaine iteration 
            compteur = 0; 
        }
    }

    return newGrid; 
}

/* fonction boucle principale du jeu */

function update(){
    if(grid)
    grid = nouvelleGeneration(grid); 
    render(grid , contexte); 
    requestAnimationFrame(update); 
    sleep(tempsAttente);
}

/* lancement du jeu  */



console.log( " voyons voir si la grille est vide .. " +  grilleEstVide()); 

/*
initialiserMatriceManuellement(); */

